/*
 * exchangerate-host
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.deca.gateway.curexrate.ApiCallback;
import com.deca.gateway.curexrate.ApiClient;
import com.deca.gateway.curexrate.ApiException;
import com.deca.gateway.curexrate.ApiResponse;
import com.deca.gateway.curexrate.Configuration;
import com.deca.gateway.curexrate.Pair;
import com.deca.gateway.curexrate.ProgressRequestBody;
import com.deca.gateway.curexrate.ProgressResponseBody;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.threeten.bp.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getDate
     * @param date (format YYYY-MM-DD) (required)
     * @param base Changing base currency. Enter the three-letter currency code of your preferred base currency. (optional)
     * @param symbols Enter a list of comma-separated currency codes to limit output currencies. (optional)
     * @param amount The amount to be converted. (optional)
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param places Round numbers to decimal place. (optional)
     * @param format If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @param source  You can switch source data between (default) forex, bank view or crypto currencies. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDateCall(LocalDate date, String base, String symbols, String amount, String paramCallback, String places, String format, String source, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{date}"
            .replaceAll("\\{" + "date" + "\\}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (base != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base", base));
        }

        if (symbols != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbols", symbols));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (places != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("places", places));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDateValidateBeforeCall(LocalDate date, String base, String symbols, String amount, String paramCallback, String places, String format, String source, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getDate(Async)");
        }
        

        okhttp3.Call localVarCall = getDateCall(date, base, symbols, amount, paramCallback, places, format, source, _callback);
        return localVarCall;

    }

    /**
     * Your GET endpoint
     * Historical rates are available for most currencies all the way back to the year of 1999. You can query the API for historical rates by appending a date (format YYYY-MM-DD) to the base URL.
     * @param date (format YYYY-MM-DD) (required)
     * @param base Changing base currency. Enter the three-letter currency code of your preferred base currency. (optional)
     * @param symbols Enter a list of comma-separated currency codes to limit output currencies. (optional)
     * @param amount The amount to be converted. (optional)
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param places Round numbers to decimal place. (optional)
     * @param format If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @param source  You can switch source data between (default) forex, bank view or crypto currencies. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 getDate(LocalDate date, String base, String symbols, String amount, String paramCallback, String places, String format, String source) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = getDateWithHttpInfo(date, base, symbols, amount, paramCallback, places, format, source);
        return localVarResp.getData();
    }

    /**
     * Your GET endpoint
     * Historical rates are available for most currencies all the way back to the year of 1999. You can query the API for historical rates by appending a date (format YYYY-MM-DD) to the base URL.
     * @param date (format YYYY-MM-DD) (required)
     * @param base Changing base currency. Enter the three-letter currency code of your preferred base currency. (optional)
     * @param symbols Enter a list of comma-separated currency codes to limit output currencies. (optional)
     * @param amount The amount to be converted. (optional)
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param places Round numbers to decimal place. (optional)
     * @param format If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @param source  You can switch source data between (default) forex, bank view or crypto currencies. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> getDateWithHttpInfo(LocalDate date, String base, String symbols, String amount, String paramCallback, String places, String format, String source) throws ApiException {
        okhttp3.Call localVarCall = getDateValidateBeforeCall(date, base, symbols, amount, paramCallback, places, format, source, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Your GET endpoint (asynchronously)
     * Historical rates are available for most currencies all the way back to the year of 1999. You can query the API for historical rates by appending a date (format YYYY-MM-DD) to the base URL.
     * @param date (format YYYY-MM-DD) (required)
     * @param base Changing base currency. Enter the three-letter currency code of your preferred base currency. (optional)
     * @param symbols Enter a list of comma-separated currency codes to limit output currencies. (optional)
     * @param amount The amount to be converted. (optional)
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param places Round numbers to decimal place. (optional)
     * @param format If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @param source  You can switch source data between (default) forex, bank view or crypto currencies. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDateAsync(LocalDate date, String base, String symbols, String amount, String paramCallback, String places, String format, String source, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDateValidateBeforeCall(date, base, symbols, amount, paramCallback, places, format, source, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatest
     * @param base Changing base currency. Enter the three-letter currency code of your preferred base currency. (optional)
     * @param symbols Enter a list of comma-separated currency codes to limit output currencies. (optional)
     * @param amount The amount to be converted. (optional)
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param places Round numbers to decimal place. (optional)
     * @param format If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @param source  You can switch source data between (default) forex, bank view or crypto currencies. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestCall(String base, String symbols, String amount, String paramCallback, String places, String format, String source, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (base != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base", base));
        }

        if (symbols != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbols", symbols));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (places != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("places", places));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestValidateBeforeCall(String base, String symbols, String amount, String paramCallback, String places, String format, String source, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLatestCall(base, symbols, amount, paramCallback, places, format, source, _callback);
        return localVarCall;

    }

    /**
     * Your GET endpoint
     * Get the latest foreign exchange reference rates. Latest endpoint will return exchange rate data updated on daily basis.
     * @param base Changing base currency. Enter the three-letter currency code of your preferred base currency. (optional)
     * @param symbols Enter a list of comma-separated currency codes to limit output currencies. (optional)
     * @param amount The amount to be converted. (optional)
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param places Round numbers to decimal place. (optional)
     * @param format If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @param source  You can switch source data between (default) forex, bank view or crypto currencies. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 getLatest(String base, String symbols, String amount, String paramCallback, String places, String format, String source) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = getLatestWithHttpInfo(base, symbols, amount, paramCallback, places, format, source);
        return localVarResp.getData();
    }

    /**
     * Your GET endpoint
     * Get the latest foreign exchange reference rates. Latest endpoint will return exchange rate data updated on daily basis.
     * @param base Changing base currency. Enter the three-letter currency code of your preferred base currency. (optional)
     * @param symbols Enter a list of comma-separated currency codes to limit output currencies. (optional)
     * @param amount The amount to be converted. (optional)
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param places Round numbers to decimal place. (optional)
     * @param format If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @param source  You can switch source data between (default) forex, bank view or crypto currencies. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> getLatestWithHttpInfo(String base, String symbols, String amount, String paramCallback, String places, String format, String source) throws ApiException {
        okhttp3.Call localVarCall = getLatestValidateBeforeCall(base, symbols, amount, paramCallback, places, format, source, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Your GET endpoint (asynchronously)
     * Get the latest foreign exchange reference rates. Latest endpoint will return exchange rate data updated on daily basis.
     * @param base Changing base currency. Enter the three-letter currency code of your preferred base currency. (optional)
     * @param symbols Enter a list of comma-separated currency codes to limit output currencies. (optional)
     * @param amount The amount to be converted. (optional)
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param places Round numbers to decimal place. (optional)
     * @param format If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @param source  You can switch source data between (default) forex, bank view or crypto currencies. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestAsync(String base, String symbols, String amount, String paramCallback, String places, String format, String source, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestValidateBeforeCall(base, symbols, amount, paramCallback, places, format, source, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSymbols
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param format  If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSymbolsCall(String paramCallback, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/symbols";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSymbolsValidateBeforeCall(String paramCallback, String format, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getSymbolsCall(paramCallback, format, _callback);
        return localVarCall;

    }

    /**
     * Your GET endpoint
     * API comes with a constantly updated endpoint returning all available currencies. To access this list, make a request to the API&#39;s symbols endpoint.
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param format  If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 getSymbols(String paramCallback, String format) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = getSymbolsWithHttpInfo(paramCallback, format);
        return localVarResp.getData();
    }

    /**
     * Your GET endpoint
     * API comes with a constantly updated endpoint returning all available currencies. To access this list, make a request to the API&#39;s symbols endpoint.
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param format  If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> getSymbolsWithHttpInfo(String paramCallback, String format) throws ApiException {
        okhttp3.Call localVarCall = getSymbolsValidateBeforeCall(paramCallback, format, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Your GET endpoint (asynchronously)
     * API comes with a constantly updated endpoint returning all available currencies. To access this list, make a request to the API&#39;s symbols endpoint.
     * @param paramCallback API comes with support for JSONP Callbacks. This feature enables you to specify a function name, pass it into the API&#39;s callback GET parameter and cause the API to return your requested API response wrapped inside that function. (optional)
     * @param format  If respone success, then you can format output to XML, CSV or TSV. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSymbolsAsync(String paramCallback, String format, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSymbolsValidateBeforeCall(paramCallback, format, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
