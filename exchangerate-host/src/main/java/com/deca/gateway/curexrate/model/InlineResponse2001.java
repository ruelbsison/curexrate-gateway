/*
 * exchangerate-host
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.InlineResponse2001Symbols;
import org.openapitools.client.model.InlineResponse200Motd;

/**
 * InlineResponse2001
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-05T14:56:51.155752+08:00[Asia/Manila]")
public class InlineResponse2001 {
  public static final String SERIALIZED_NAME_MOTD = "motd";
  @SerializedName(SERIALIZED_NAME_MOTD)
  private InlineResponse200Motd motd;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_SYMBOLS = "symbols";
  @SerializedName(SERIALIZED_NAME_SYMBOLS)
  private List<InlineResponse2001Symbols> symbols = new ArrayList<InlineResponse2001Symbols>();


  public InlineResponse2001 motd(InlineResponse200Motd motd) {
    
    this.motd = motd;
    return this;
  }

   /**
   * Get motd
   * @return motd
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public InlineResponse200Motd getMotd() {
    return motd;
  }


  public void setMotd(InlineResponse200Motd motd) {
    this.motd = motd;
  }


  public InlineResponse2001 success(Boolean success) {
    
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public InlineResponse2001 symbols(List<InlineResponse2001Symbols> symbols) {
    
    this.symbols = symbols;
    return this;
  }

  public InlineResponse2001 addSymbolsItem(InlineResponse2001Symbols symbolsItem) {
    this.symbols.add(symbolsItem);
    return this;
  }

   /**
   * Get symbols
   * @return symbols
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<InlineResponse2001Symbols> getSymbols() {
    return symbols;
  }


  public void setSymbols(List<InlineResponse2001Symbols> symbols) {
    this.symbols = symbols;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2001 inlineResponse2001 = (InlineResponse2001) o;
    return Objects.equals(this.motd, inlineResponse2001.motd) &&
        Objects.equals(this.success, inlineResponse2001.success) &&
        Objects.equals(this.symbols, inlineResponse2001.symbols);
  }

  @Override
  public int hashCode() {
    return Objects.hash(motd, success, symbols);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2001 {\n");
    sb.append("    motd: ").append(toIndentedString(motd)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    symbols: ").append(toIndentedString(symbols)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

